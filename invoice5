def display_extracted_data(ocr_text, parsed_data=None):
    """Better way to display extracted data with multiple views"""
    
    # Create tabs for different views
    if parsed_data:
        tab1, tab2, tab3, tab4 = st.tabs(["üìã Structured View", "üîç Field Analysis", "üìÑ Raw Text", "üìä JSON Export"])
    else:
        tab1, tab2 = st.tabs(["üìÑ Raw Text", "üìä Analysis"])
        
    if parsed_data:
        # Tab 1: Structured View
        with tab1:
            st.subheader("üìã Extracted Invoice Data")
            
            # Display key fields in a nice format
            col1, col2 = st.columns(2)
            
            with col1:
                st.markdown("**Key Fields:**")
                fields = parsed_data["extracted_fields"]
                
                if fields.get("invoice_number"):
                    st.success(f"üî¢ Invoice Number: **{fields['invoice_number']}**")
                else:
                    st.error("üî¢ Invoice Number: Not found")
                
                if fields.get("date"):
                    st.success(f"üìÖ Date: **{fields['date']}**")
                else:
                    st.error("üìÖ Date: Not found")
                
                if fields.get("total"):
                    st.success(f"üí∞ Total: **${fields['total']}**")
                else:
                    st.error("üí∞ Total: Not found")
                
                if fields.get("vendor"):
                    st.success(f"üè¢ Vendor: **{fields['vendor']}**")
                else:
                    st.error("üè¢ Vendor: Not found")
            
            with col2:
                st.markdown("**Additional Data:**")
                
                if fields.get("all_amounts"):
                    st.info(f"üíµ All amounts found: {', '.join(fields['all_amounts'])}")
                
                if fields.get("possible_invoice_numbers"):
                    st.info(f"üîç Possible invoice numbers: {', '.join(fields['possible_invoice_numbers'][:3])}")
            
            # Line items
            if fields.get("potential_line_items"):
                st.markdown("**Line Items:**")
                for i, item in enumerate(fields["potential_line_items"][:5], 1):
                    st.text(f"{i}. {item}")
        
        # Tab 2: Field Analysis
        with tab2:
            st.subheader("üîç Field Extraction Analysis")
            
            # Show what patterns matched
            st.markdown("**Pattern Matching Results:**")
            
            success_count = 0
            total_fields = 4  # invoice_number, date, total, vendor
            
            for field, value in parsed_data["extracted_fields"].items():
                if field in ["invoice_number", "date", "total", "vendor"]:
                    if value:
                        st.success(f"‚úÖ {field.replace('_', ' ').title()}: Found")
                        success_count += 1
                    else:
                        st.error(f"‚ùå {field.replace('_', ' ').title()}: Not found")
            
            # Success rate
            success_rate = (success_count / total_fields) * 100
            st.metric("Extraction Success Rate", f"{success_rate:.1f}%")
            
            # Show extraction challenges
            st.markdown("**Common Issues with Basic Parsing:**")
            st.warning("""
            - Invoice numbers might be confused with other numbers
            - Dates might pick up wrong date formats
            - Totals might grab subtotals instead of final total
            - Vendor names might be incomplete or wrong
            """)
        
        # Tab 3: Raw Text
        with tab3:
            st.subheader("üìÑ Raw OCR Output")
            
            # Search functionality
            search_term = st.text_input("üîç Search in extracted text:")
            
            if search_term:
                # Highlight search terms
                highlighted_text = ocr_text.replace(
                    search_term, 
                    f"**{search_term}**"
                )
                st.markdown(highlighted_text)
            else:
                st.text_area("Full OCR Text", ocr_text, height=400)
            
            # Text statistics
            st.markdown("**Text Statistics:**")
            col1, col2, col3, col4 = st.columns(4)
            with col1:
                st.metric("Characters", len(ocr_text))
            with col2:
                st.metric("Words", len(ocr_text.split()))
            with col3:
                st.metric("Lines", len(ocr_text.split('\n')))
            with col4:
                numbers_found = len(re.findall(r'\d+', ocr_text))
                st.metric("Numbers", numbers_found)
        
        # Tab 4: JSON Export
        with tab4:
            st.subheader("üìä JSON Export")
            
            # Clean JSON view
            json_str = json.dumps(parsed_data, indent=2)
            st.code(json_str, language='json')
            
            # Download options
            col1, col2 = st.columns(2)
            with col1:
                st.download_button(
                    "üì• Download JSON",
                    json_str,
                    file_name="invoice_data.json",
                    mime="application/json"
                )
            with col2:
                st.download_button(
                    "üì• Download Raw Text",
                    ocr_text,
                    file_name="invoice_raw.txt",
                    mime="text/plain"
                )
    
    else:
        # Simple view for raw text only
        with tab1:
            st.text_area("Raw OCR Output", ocr_text, height=400)
        
        with tab2:
            st.markdown("**Text Statistics:**")
            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("Characters", len(ocr_text))
            with col2:
                st.metric("Words", len(ocr_text.split()))
            with col3:
                st.metric("Lines", len(ocr_text.split('\n')))import streamlit as st
import json
import re
from datetime import datetime
import tempfile
import os
import io

# Required libraries - install with: pip install streamlit pymupdf pytesseract pillow
try:
    import fitz  # PyMuPDF
    PYMUPDF_AVAILABLE = True
except ImportError:
    PYMUPDF_AVAILABLE = False
    st.error("PyMuPDF not installed. Run: pip install pymupdf")

# OCR imports
try:
    import pytesseract
    from PIL import Image
    OCR_AVAILABLE = True
    
    # Set Windows path by default
    pytesseract.pytesseract.tesseract_cmd = r'C:\Program Files\Tesseract-OCR\tesseract.exe'
    
    # Test tesseract
    try:
        tesseract_version = pytesseract.get_tesseract_version()
        OCR_STATUS = f"Available (v{tesseract_version})"
    except:
        OCR_STATUS = "Needs path configuration"
except ImportError:
    OCR_AVAILABLE = False
    OCR_STATUS = "Not installed - Run: pip install pytesseract pillow"

def simple_ocr_extract(pdf_file):
    """Simple OCR extraction - no bounding boxes, just read everything"""
    if not PYMUPDF_AVAILABLE:
        return "Error: PyMuPDF not installed. Run: pip install pymupdf"
        
    try:
        with tempfile.NamedTemporaryFile(delete=False, suffix='.pdf') as tmp_file:
            tmp_file.write(pdf_file.read())
            tmp_file_path = tmp_file.name

        doc = fitz.open(tmp_file_path)
        all_text = ""
        
        for page_num in range(len(doc)):
            page = doc[page_num]
            
            # Convert page to image
            pix = page.get_pixmap(matrix=fitz.Matrix(2, 2))  # Higher resolution
            img_data = pix.tobytes("png")
            img = Image.open(io.BytesIO(img_data))
            
            # Simple OCR - read everything
            page_text = pytesseract.image_to_string(img, lang='eng')
            all_text += f"\\n--- PAGE {page_num + 1} ---\\n{page_text}"
        
        doc.close()
        os.unlink(tmp_file_path)
        return all_text
        
    except Exception as e:
        return f"Error: {str(e)}"

def basic_parsing(text):
    """Basic parsing without schema - just pattern matching"""
    result = {
        "raw_ocr_text": text,
        "parsing_method": "Basic Regex (No Schema)",
        "extracted_fields": {},
        "timestamp": datetime.now().isoformat()
    }
    
    # Simple patterns - will work sometimes, fail often
    patterns = {
        "invoice_number": [
            r"invoice\s*#?\s*:?\s*([A-Z0-9-]+)",
            r"inv\s*#?\s*:?\s*([A-Z0-9-]+)",
            r"#\s*([A-Z0-9-]+)"
        ],
        "date": [
            r"date\s*:?\s*(\d{1,2}[/-]\d{1,2}[/-]\d{2,4})",
            r"(\d{1,2}[/-]\d{1,2}[/-]\d{2,4})",
            r"(\d{1,2}\s+\w+\s+\d{4})"
        ],
        "total": [
            r"total\s*:?\s*\$?(\d+[,.]?\d*\.?\d{0,2})",
            r"amount\s*due\s*:?\s*\$?(\d+[,.]?\d*\.?\d{0,2})",
            r"\$(\d+[,.]?\d*\.?\d{0,2})"
        ],
        "vendor": [
            r"from\s*:?\s*([A-Z][A-Za-z\s&,.]+?)(?:\\n|$)",
            r"bill\s*from\s*:?\s*([A-Z][A-Za-z\s&,.]+?)(?:\\n|$)"
        ]
    }
    
    # Try to extract fields
    for field, pattern_list in patterns.items():
        for pattern in pattern_list:
            match = re.search(pattern, text, re.IGNORECASE | re.MULTILINE)
            if match:
                result["extracted_fields"][field] = match.group(1).strip()
                break
        
        if field not in result["extracted_fields"]:
            result["extracted_fields"][field] = None
    
    # Extract all dollar amounts
    dollar_amounts = re.findall(r'\$(\d+[,.]?\d*\.?\d{0,2})', text)
    result["extracted_fields"]["all_amounts"] = dollar_amounts
    
    # Extract all numbers that could be invoice numbers
    possible_invoice_numbers = re.findall(r'\\b[A-Z0-9]{3,}\\b', text)
    result["extracted_fields"]["possible_invoice_numbers"] = possible_invoice_numbers[:5]
    
    # Basic line items detection
    lines = text.split('\\n')
    line_items = []
    for line in lines:
        # Look for lines with quantity, description, and amount
        if re.search(r'\\d+.*\\$\\d+', line) and len(line.strip()) > 5:
            line_items.append(line.strip())
    
    result["extracted_fields"]["potential_line_items"] = line_items[:10]
    
    return result

def main():
    st.set_page_config(
        page_title="Simple OCR Invoice Extractor",
        page_icon="üëÅÔ∏è",
        layout="wide"
    )
    
    st.title("üëÅÔ∏è Simple OCR Invoice Extractor")
    st.markdown("**Pure OCR approach** - No bounding boxes, no schemas, just read everything")
    
    # OCR Status
    if OCR_AVAILABLE:
        if "Needs path" in OCR_STATUS:
            st.warning(f"‚ö†Ô∏è OCR {OCR_STATUS}")
            with st.expander("Set Tesseract Path"):
                path = st.text_input("Tesseract Path", placeholder=r"C:\\Program Files\\Tesseract-OCR\\tesseract.exe")
                if st.button("Set Path") and path:
                    try:
                        pytesseract.pytesseract.tesseract_cmd = path
                        st.success("Path set! Refresh the page.")
                    except Exception as e:
                        st.error(f"Error: {e}")
        else:
            st.success(f"‚úÖ OCR {OCR_STATUS}")
    else:
        st.error(f"‚ùå OCR {OCR_STATUS}")
        st.info("Install: `pip install pytesseract pillow`")
    
    # File upload
    uploaded_file = st.file_uploader("Upload PDF Invoice", type="pdf")
    
    if uploaded_file:
        st.success(f"File uploaded: {uploaded_file.name}")
        
        col1, col2 = st.columns([1, 1])
        
        with col1:
            st.subheader("üîç Processing")
            
            parsing_option = st.radio(
                "What do you want to see?",
                ["Raw OCR Text Only", "OCR + Basic Parsing", "Both"],
                help="Choose how much processing to apply"
            )
            
            if st.button("Extract with OCR", type="primary"):
                if not OCR_AVAILABLE:
                    st.error("OCR not available!")
                else:
                    with st.spinner("Running OCR..."):
                        # Extract text
                        ocr_text = simple_ocr_extract(uploaded_file)
                        
                        if "Error" in ocr_text:
                            st.error(ocr_text)
                        else:
                            st.success("‚úÖ OCR completed!")
                            
                            with col2:
                                st.subheader("üìÑ Results")
                                
                                if parsing_option == "Raw OCR Text Only":
                                    display_extracted_data(ocr_text)
                                
                                elif parsing_option == "OCR + Basic Parsing":
                                    parsed_data = basic_parsing(ocr_text)
                                    display_extracted_data(ocr_text, parsed_data)
                                
                                else:  # Both
                                    parsed_data = basic_parsing(ocr_text)
                                    display_extracted_data(ocr_text, parsed_data)
                            
                            # Analysis
                            st.subheader("üìä Analysis")
                            
                            if parsing_option != "Raw OCR Text Only":
                                parsed_data = basic_parsing(ocr_text)
                                
                                col_a, col_b, col_c = st.columns(3)
                                with col_a:
                                    st.metric("Characters Extracted", len(ocr_text))
                                with col_b:
                                    fields_found = len([v for v in parsed_data["extracted_fields"].values() if v and v != []])
                                    st.metric("Fields Found", fields_found)
                                with col_c:
                                    line_items = len(parsed_data["extracted_fields"].get("potential_line_items", []))
                                    st.metric("Line Items", line_items)
                            
                            # Parsing limitations
                            if parsing_option != "Raw OCR Text Only":
                                st.warning("‚ö†Ô∏è **Basic Parsing Limitations**")
                                st.write("""
                                **Why basic parsing often fails:**
                                - No form identification (treats all invoices the same)
                                - Simple regex patterns (miss variations)
                                - No field position knowledge
                                - No confidence scoring
                                - Lots of false positives
                                
                                **For production use, you'd need:**
                                - Schema-based approach (your current method)
                                - Machine learning for field identification
                                - Confidence scoring and validation
                                - Vendor-specific templates
                                """)
    
    else:
        st.info("""
        **This app demonstrates:**
        - Pure OCR extraction (no bounding boxes)
        - Basic pattern matching (no schemas)
        - Why schema-based approaches are better
        
        **Upload a PDF to see:**
        - What OCR can extract from your invoices
        - How basic parsing performs vs your schema approach
        - Why your current architecture is more robust
        """)

if __name__ == "__main__":
    main()
