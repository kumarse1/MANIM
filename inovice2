import streamlit as st
import fitz  # PyMuPDF
import json
import re
from datetime import datetime
import tempfile
import os

def extract_text_from_pdf(pdf_file):
    """Extract text from PDF using PyMuPDF with detailed diagnostics"""
    try:
        # Save uploaded file to temporary location
        with tempfile.NamedTemporaryFile(delete=False, suffix='.pdf') as tmp_file:
            tmp_file.write(pdf_file.read())
            tmp_file_path = tmp_file.name

        # Open PDF and extract text
        doc = fitz.open(tmp_file_path)
        
        # Diagnostic information
        diagnostic_info = {
            "page_count": len(doc),
            "is_encrypted": doc.needs_pass,
            "metadata": doc.metadata,
            "page_details": []
        }
        
        full_text = ""
        
        for page_num in range(len(doc)):
            page = doc[page_num]
            
            # Get text using different methods
            text_dict = page.get_text("dict")
            text_plain = page.get_text()
            text_blocks = page.get_text("blocks")
            
            # Check if page has images
            image_list = page.get_images()
            
            page_info = {
                "page_number": page_num + 1,
                "text_length": len(text_plain),
                "has_images": len(image_list) > 0,
                "image_count": len(image_list),
                "block_count": len(text_blocks),
                "fonts_used": []
            }
            
            # Extract font information
            if text_dict and "blocks" in text_dict:
                fonts = set()
                for block in text_dict["blocks"]:
                    if "lines" in block:
                        for line in block["lines"]:
                            if "spans" in line:
                                for span in line["spans"]:
                                    if "font" in span:
                                        fonts.add(span["font"])
                page_info["fonts_used"] = list(fonts)
            
            diagnostic_info["page_details"].append(page_info)
            
            # Try different extraction methods if plain text is empty or suspicious
            if not text_plain.strip() or text_plain.count('x') > len(text_plain) * 0.5:
                # Try extracting as HTML
                text_html = page.get_text("html")
                full_text += f"\n--- Page {page_num + 1} (HTML METHOD) ---\n"
                full_text += f"Plain text length: {len(text_plain)}\n"
                full_text += f"Has images: {len(image_list) > 0}\n"
                full_text += f"Text blocks: {len(text_blocks)}\n"
                if text_plain.strip():
                    full_text += f"Plain text sample: {text_plain[:200]}...\n"
                full_text += "--- END DIAGNOSTICS ---\n"
            else:
                full_text += f"\n--- Page {page_num + 1} ---\n" + text_plain
        
        doc.close()
        
        # Clean up temporary file
        os.unlink(tmp_file_path)
        
        # Add diagnostic info to the beginning
        diagnostic_text = f"=== PDF DIAGNOSTICS ===\n"
        diagnostic_text += f"Pages: {diagnostic_info['page_count']}\n"
        diagnostic_text += f"Encrypted: {diagnostic_info['is_encrypted']}\n"
        diagnostic_text += f"Title: {diagnostic_info['metadata'].get('title', 'N/A')}\n"
        diagnostic_text += f"Creator: {diagnostic_info['metadata'].get('creator', 'N/A')}\n"
        diagnostic_text += "=== END DIAGNOSTICS ===\n\n"
        
        return diagnostic_text + full_text
        
    except Exception as e:
        return f"Error extracting text: {str(e)}"

def parse_invoice_data(text):
    """Parse common invoice fields from extracted text"""
    invoice_data = {
        "raw_text": text,
        "extracted_fields": {},
        "extraction_method": "PyMuPDF",
        "timestamp": datetime.now().isoformat()
    }
    
    # Common patterns for invoice data extraction
    patterns = {
        "invoice_number": [
            r"Invoice\s*#?\s*:?\s*(\w+[-]?\w*)",
            r"Invoice\s*Number\s*:?\s*(\w+[-]?\w*)",
            r"INV\s*#?\s*:?\s*(\w+[-]?\w*)"
        ],
        "invoice_date": [
            r"Invoice\s*Date\s*:?\s*(\d{1,2}[/-]\d{1,2}[/-]\d{2,4})",
            r"Date\s*:?\s*(\d{1,2}[/-]\d{1,2}[/-]\d{2,4})",
            r"(\d{1,2}[/-]\d{1,2}[/-]\d{2,4})"
        ],
        "total_amount": [
            r"Total\s*:?\s*\$?(\d+[,.]?\d*\.?\d{0,2})",
            r"Amount\s*Due\s*:?\s*\$?(\d+[,.]?\d*\.?\d{0,2})",
            r"Grand\s*Total\s*:?\s*\$?(\d+[,.]?\d*\.?\d{0,2})"
        ],
        "vendor_name": [
            r"From\s*:?\s*([A-Za-z\s&,.]+?)(?:\n|$)",
            r"Bill\s*From\s*:?\s*([A-Za-z\s&,.]+?)(?:\n|$)"
        ]
    }
    
    # Extract fields using regex patterns
    for field, pattern_list in patterns.items():
        for pattern in pattern_list:
            match = re.search(pattern, text, re.IGNORECASE | re.MULTILINE)
            if match:
                invoice_data["extracted_fields"][field] = match.group(1).strip()
                break
        
        # If no match found, set as null
        if field not in invoice_data["extracted_fields"]:
            invoice_data["extracted_fields"][field] = None
    
    # Extract line items (simplified)
    line_items = []
    lines = text.split('\n')
    
    for line in lines:
        # Look for lines that might be line items (contain quantity, description, price)
        if re.search(r'\d+\s+.*\s+\$?\d+\.?\d{0,2}', line):
            line_items.append(line.strip())
    
    invoice_data["extracted_fields"]["line_items"] = line_items[:10]  # Limit to first 10
    
    return invoice_data

def main():
    st.set_page_config(
        page_title="PDF Invoice Data Extractor",
        page_icon="üìÑ",
        layout="wide"
    )
    
    st.title("üìÑ PDF Invoice Data Extractor")
    st.markdown("Upload a PDF invoice to extract data using PyMuPDF and see the results as JSON")
    
    # File uploader
    uploaded_file = st.file_uploader(
        "Choose a PDF file",
        type="pdf",
        help="Upload an invoice PDF to extract text and structured data"
    )
    
    if uploaded_file is not None:
        st.success(f"File uploaded: {uploaded_file.name}")
        
        # Create columns for layout
        col1, col2 = st.columns([1, 1])
        
        with col1:
            st.subheader("üîç Processing Options")
            
            show_raw_text = st.checkbox("Show raw extracted text", value=False)
            
            if st.button("Extract Data", type="primary"):
                with st.spinner("Extracting text from PDF..."):
                    # Extract text from PDF
                    extracted_text = extract_text_from_pdf(uploaded_file)
                    
                    if "Error" in extracted_text:
                        st.error(extracted_text)
                    else:
                        # Parse invoice data
                        invoice_data = parse_invoice_data(extracted_text)
                        
                        st.success("‚úÖ Data extraction completed!")
                        
                        # Display results
                        with col2:
                            st.subheader("üìä Extracted Data (JSON)")
                            
                            # Pretty print JSON
                            json_str = json.dumps(invoice_data, indent=2, ensure_ascii=False)
                            st.code(json_str, language='json')
                            
                            # Download button
                            st.download_button(
                                label="‚¨áÔ∏è Download JSON",
                                data=json_str,
                                file_name=f"extracted_data_{uploaded_file.name}.json",
                                mime="application/json"
                            )
                        
                        # Show raw text if requested
                        if show_raw_text:
                            st.subheader("üìù Raw Extracted Text")
                            with st.expander("Click to view raw text"):
                                st.text(extracted_text)
                        
                        # Summary statistics
                        st.subheader("üìà Extraction Summary")
                        col_stat1, col_stat2, col_stat3 = st.columns(3)
                        
                        with col_stat1:
                            st.metric("Characters Extracted", len(extracted_text))
                        
                        with col_stat2:
                            fields_found = len([v for v in invoice_data["extracted_fields"].values() if v is not None])
                            st.metric("Fields Extracted", fields_found)
                        
                        with col_stat3:
                            line_items_count = len(invoice_data["extracted_fields"]["line_items"])
                            st.metric("Line Items Found", line_items_count)

    else:
        # Instructions
        st.info("""
        **How to use:**
        1. Upload a PDF invoice using the file uploader above
        2. Click 'Extract Data' to process the document
        3. View the extracted data in JSON format
        4. Download the results or copy the JSON for further processing
        
        **What this extracts:**
        - Invoice number
        - Invoice date  
        - Total amount
        - Vendor name
        - Line items (simplified)
        - Raw text content
        """)

if __name__ == "__main__":
    main()
